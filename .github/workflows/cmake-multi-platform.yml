# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        # c_compiler: [gcc, clang, cl]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

      # Upload artifacts
      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: beat-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/beat
          retention-days: 90

      - name: Upload beat executable (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: beat-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/beat.exe
          retention-days: 90
      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: beat-${{ matrix.os }}-${{ matrix.c_compiler }}
          path: ${{ steps.strings.outputs.build-output-dir }}/beat
          retention-days: 90

  build-linux-static-musl:
    name: Linux static (musl)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.12.0

      # Create compiler wrapper shims so CMake sees real executables
      - name: Make zigcc / zigc++ wrappers
        run: |
          mkdir -p "$HOME/bin"
          printf '#!/usr/bin/env bash\nexec zig cc "$@"\n' > "$HOME/bin/zigcc"
          printf '#!/usr/bin/env bash\nexec zig c++ "$@"\n' > "$HOME/bin/zigc++"
          chmod +x "$HOME/bin/zigcc" "$HOME/bin/zigc++"
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Configure (musl, fully static)
        run: |
          cmake -B build-musl -S . \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
            -DCMAKE_C_COMPILER=zigcc \
            -DCMAKE_CXX_COMPILER=zigc++ \
            -DCMAKE_C_COMPILER_TARGET=x86_64-linux-musl \
            -DCMAKE_CXX_COMPILER_TARGET=x86_64-linux-musl \
            -DCMAKE_EXE_LINKER_FLAGS="-static" \
            -DCMAKE_SKIP_RPATH=ON

      - name: Build
        run: cmake --build build-musl --config Release -j

      - name: Test
        working-directory: build-musl
        run: ctest --build-config Release --output-on-failure

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: beat-linux-musl-static
          path: build-musl/beat
          retention-days: 90
