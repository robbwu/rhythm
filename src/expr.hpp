// auto-generated by tool//Users/pwu/Code/cclox/tool/gen_ast_classes.py
#include <scanner.hpp>
#include <memory>

class Binary;
class Grouping;
class Literal;
class Unary;

class ExprVisitor {
public:
    virtual ~ExprVisitor() = default;

    virtual void visit(const Binary&) = 0;
    virtual void visit(const Grouping&) = 0;
    virtual void visit(const Literal&) = 0;
    virtual void visit(const Unary&) = 0;
};

class Expr {
public:
    virtual ~Expr() = default;
    virtual void accept(ExprVisitor& visitor) const = 0;
};



class Binary : public Expr {
public:
    std::unique_ptr<Expr> left;
    Token op;
    std::unique_ptr<Expr> right;

    Binary(std::unique_ptr<Expr> _left, Token _op, std::unique_ptr<Expr> _right)
        : left(std::move(_left)), op(_op), right(std::move(_right)) {}

    static std::unique_ptr<Binary> create(
        std::unique_ptr<Expr> _left,
        Token _op,
        std::unique_ptr<Expr> _right) {
        return std::make_unique<Binary>(std::move(_left), _op, std::move(_right));
    }
    void accept(ExprVisitor& visitor) const override {
        return visitor.visit(*this);
    }
};

class Grouping : public Expr {
public:
    std::unique_ptr<Expr> expression;

    Grouping(std::unique_ptr<Expr> _expression)
        : expression(std::move(_expression)) {}

    static std::unique_ptr<Grouping> create(std::unique_ptr<Expr> _expression) {
        return std::make_unique<Grouping>(std::move(_expression));
    }

    void accept(ExprVisitor& visitor) const override {
        return visitor.visit(*this);
    }
};

class Literal : public Expr {
public:
    Value value;

    Literal(Value _value)
        : value(_value) {}

    static std::unique_ptr<Literal> create(Value _value) {
        return std::make_unique<Literal>(_value);
    }

    void accept(ExprVisitor& visitor) const override {
        return visitor.visit(*this);
    }
};

class Unary : public Expr {
public:
    Token op;
    std::unique_ptr<Expr> right;

    Unary(Token _op, std::unique_ptr<Expr> _right)
        : op(_op), right(std::move(_right)) {}

    static std::unique_ptr<Unary> create(
        Token _op,
        std::unique_ptr<Expr> _right) {
        return std::make_unique<Unary>(_op, std::move(_right));
    }

    void accept(ExprVisitor& visitor) const override {
        return visitor.visit(*this);
    }
};


