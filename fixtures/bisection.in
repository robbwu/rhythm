var a = [ 1, 3, 4, 6, 8, 10, 21, 39, 100];

printf("size of a is %d\n", len(a));

// find x in a[i0:i1]
fun bisect(a, x, i0, i1) {
    if (i0 == i1) return -1; // -1 means not found
    if (i0 + 1 == i1) {
       if (a[i0] == x) return i0;
       return -1;
    }
    var m = floor((i0+i1) / 2);
    //if (a[m] == x) return m;
    if (a[m] <= x)
        return bisect(a, x, m, i1);
    return bisect(a, x, i0, m);
}
var x = 10;
var i = bisect(a, x, 0, len(a));
printf("i=%d, a[i]=%d, x=%d\n", i, a[i], x);
assert( a[i] == x);

var x = 9;
var i = bisect(a, x, 0, len(a));
assert( i == -1);

assert( bisect(a, 0,0, len(a)) == -1 );
assert( bisect(a, 110,0, len(a)) == -1);
assert( bisect(a, 1, 0, len(a)) == 0 );
assert( bisect(a, 100,0, len(a)) == len(a) - 1 );
print "OK";